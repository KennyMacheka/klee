#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

# ===-- klee-stats --------------------------------------------------------===##
#
#                      The KLEE Symbolic Virtual Machine
#
#  This file is distributed under the University of Illinois Open Source
#  License. See LICENSE.TXT for details.
#
# ===----------------------------------------------------------------------===##

"""Interface for experimenting with profiling"""

import argparse
import os
import sqlite3
import subprocess
import threading
import time


class KleeStats(object):
    def __init__(self, cursor):
        self.cursor = cursor
        self.cursor.execute("SELECT Instructions, CoveredInstructions, UncoveredInstructions FROM stats ORDER BY Instructions DESC LIMIT 1")

        data = self.cursor.fetchone() 
        self.coveredInstructions = data[1]
        self.uncoveredInstructions = data[2]

    def instructionsCoverage(self):
        return (self.coveredInstructions/(self.coveredInstructions+self.uncoveredInstructions))*100


def run_from_scratch():
    parser = argparse.ArgumentParser(description='Run C program on Klee')
    parser.add_argument('file', type=str, nargs=1, help='.c file or coreutils directory')
    parser.add_argument('profdata', type=str, nargs='*', help='profile data files or folders')
    parser.add_argument('numArgs', type=int , nargs='?', help="Number of sym-args when running with klee")

    args = parser.parse_args()
    file = args.file[0]

    numArgs = args.numArgs[0]
    fileWithoutExt = file.split('.')[0]
    profileData = args.profdata
    mergedProfileFile = "main.profdata"

    #Merge profile data
    os.system("llvm-profdata-6.0 merge -output=" + mergedProfileFile + " " + ' '.join(profileData))

    #Compile C program with merged profile files
    os.system("clang-6.0 -g -fprofile-instr-use=" + mergedProfileFile + " -c -emit-llvm " + file)

    print("File is: ", fileWithoutExt, " and ", file, " and", file.split('.'))

    #Assemble readable asm to .bc- will fail if it already created a .bc file but not issue
    os.system("llvm-as-6.0 " + fileWithoutExt + ".ll")

    #run with klee
    os.system("klee --optimize --libc=uclibc --posix-runtime " + fileWithoutExt + ".bc " + " --sym-arg " + str(numArgs))
    stats = sqlite3.connect("klee-last/run.stats")
    c = stats.cursor()
    statsData = KleeStats(c)
    print("Instruction Coverage Default Searcher: ", statsData.instructionsCoverage())
    #From database need to calculate these values:
    #Branch coverage (need to get this)
    

def getCoverage(path):
    print(path)
    stats = sqlite3.connect(path)
    c = stats.cursor()
    statsData = KleeStats(c)

    return statsData.instructionsCoverage()

#Use gcov for coverage    
def main():
    runCoreutils = False 
    parser = argparse.ArgumentParser(description='Run C program on Klee')
    parser.add_argument('directory', type=str, nargs=1, help='directory of bc files')

    args = parser.parse_args()
    directory = args.directory[0]

    os.chdir(directory)
    files = subprocess.run(["ls"], stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
    bcFiles = [file for file in files if ".bc" in file]

    for file in bcFiles:
        path = directory+"/"+file
        print("Running ", file)
        runNoProfiling = "klee --optimize --libc=uclibc --posix-runtime " + path + " --sym-args 0 4 4"
        runWithProfiling = "klee -search nurs:bc --optimize --libc=uclibc --posix-runtime " + path + " --sym-args 0 4 4"
        process= subprocess.Popen([runWithProfiling], shell=True)
        time.sleep(180)
        process.terminate()
        coverage = getCoverage(directory+"/klee-last/run.stats")
        print("Coverage with profiling: ", coverage, "%")
        process = subprocess.Popen([runNoProfiling], shell=True)
        time.sleep(180)
        process.terminate()
        coverage = getCoverage(directory+"/klee-last/run.stats")
        print("Coverage without profiling: ", coverage, "%")
        print()

        
           
main()
