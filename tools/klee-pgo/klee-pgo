#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

# ===-- klee-stats --------------------------------------------------------===##
#
#                      The KLEE Symbolic Virtual Machine
#
#  This file is distributed under the University of Illinois Open Source
#  License. See LICENSE.TXT for details.
#
# ===----------------------------------------------------------------------===##

"""Interface for experimenting with profiling"""

import argparse
import os
import sqlite3
import subprocess
import threading
import time


"""
    for file in os.listdir(dir):
     if file.endswith(ext):
"""
class KleeStats(object):
    def __init__(self, cursor):
        self.cursor = cursor
        self.cursor.execute("SELECT Instructions, CoveredInstructions, UncoveredInstructions FROM stats ORDER BY Instructions DESC LIMIT 1")

        data = self.cursor.fetchone() 
        self.coveredInstructions = data[1]
        self.uncoveredInstructions = data[2]

    def instructionsCoverage(self):
        return (self.coveredInstructions/(self.coveredInstructions+self.uncoveredInstructions))*100


def run_from_scratch():
    parser = argparse.ArgumentParser(description='Run C program on Klee')
    parser.add_argument('file', type=str, nargs=1, help='.c file or coreutils directory')
    parser.add_argument('profdata', type=str, nargs='*', help='profile data files or folders')
    parser.add_argument('numArgs', type=int , nargs='?', help="Number of sym-args when running with klee")

    args = parser.parse_args()
    file = args.file[0]

    numArgs = args.numArgs[0]
    fileWithoutExt = file.split('.')[0]
    profileData = args.profdata
    mergedProfileFile = "main.profdata"

    #Merge profile data
    os.system("llvm-profdata-6.0 merge -output=" + mergedProfileFile + " " + ' '.join(profileData))

    #Compile C program with merged profile files
    os.system("clang-6.0 -g -fprofile-instr-use=" + mergedProfileFile + " -c -emit-llvm " + file)

    print("File is: ", fileWithoutExt, " and ", file, " and", file.split('.'))

    #Assemble readable asm to .bc- will fail if it already created a .bc file but not issue
    os.system("llvm-as-6.0 " + fileWithoutExt + ".ll")

    #run with klee
    os.system("klee --optimize --libc=uclibc --posix-runtime " + fileWithoutExt + ".bc " + " --sym-arg " + str(numArgs))
    stats = sqlite3.connect("klee-last/run.stats")
    c = stats.cursor()
    statsData = KleeStats(c)
    print("Instruction Coverage Default Searcher: ", statsData.instructionsCoverage())
    #From database need to calculate these values:
    #Branch coverage (need to get this)
    

def getCoverage(path):
    print(path)
    stats = sqlite3.connect(path)
    c = stats.cursor()
    statsData = KleeStats(c)

    return statsData.instructionsCoverage()

def runProgram(kleeCommand, directoryLLVM, directoryGCOV, file, outDir):
    remove = "rm -rf " + outDir
    process = subprocess.Popen([remove], shell=True)
    process.wait()
    
    process= subprocess.Popen([kleeCommand], shell=True)
    process.wait()
    os.chdir(directoryGCOV)

    removeGCOV = "rm -f " + file + ".c.gcov"
    process = subprocess.Popen([removeGCOV], shell=True)
    process.wait()

    removeGCDA = "rm -f " + file + ".gcda"
    process = subprocess.Popen([removeGCOV], shell=True)
    process.wait()
    
    #Change this code to the kleestar stuff
    runTests = "klee-replay " + file + " " + outDir + "/*.ktest"
    process=subprocess.Popen([runTests], shell=True)
    process.wait()

    runGCOV = "gcov " + file
    process = subprocess.Popen([runGCOV], shell=True, stdout=subprocess.PIPE)
    out, err = process.communicate()
    process.wait()

    removeGCOV = "rm -f " + file + ".c.gcov"
    process = subprocess.Popen([removeGCOV], shell=True)
    process.wait()
    os.chdir(directoryLLVM)

    return out.decode('utf-8')

def union(kleeCommand1, kleeCommand2, directoryLLVM, directoryGCOV, file, outDir, outDir2):
    remove = "rm -rf " + outDir
    remove2 = "rm -rf " + outDir2
    process = subprocess.Popen([remove], shell=True)
    process.wait()
    process = subprocess.Popen([remove2], shell=True)
    process.wait()

    process= subprocess.Popen([kleeCommand1], shell=True)
    process.wait()
    process= subprocess.Popen([kleeCommand2], shell=True)
    process.wait()
    
    os.chdir(directoryGCOV)

    removeGCOV = "rm -f " + file + ".c.gcov"
    process = subprocess.Popen([removeGCOV], shell=True)
    process.wait()

    removeGCDA = "rm -f " + file + ".gcda"
    process = subprocess.Popen([removeGCOV], shell=True)
    process.wait()

    runTests = "klee-replay " + file + " " + outDir + "/*.ktest"
    process=subprocess.Popen([runTests], shell=True)
    process.wait()
    
    runTests2 = "klee-replay " + file + " " + outDir2 + "/*.ktest"
    process=subprocess.Popen([runTests2], shell=True)
    process.wait()

    runGCOV = "gcov " + file
    process = subprocess.Popen([runGCOV], shell=True, stdout=subprocess.PIPE)
    out, err = process.communicate()
    process.wait()

    removeGCOV = "rm -f " + file + ".c.gcov"
    process = subprocess.Popen([removeGCOV], shell=True)
    process.wait()
    os.chdir(directoryLLVM)

    return out.decode('utf-8')
   
def removeDir(dirToRemove):
    remove = "rm -rf " + dirToRemove
    process = subprocess.Popen([remove], shell=True)
    process.wait()

def vuzzerTest():
       #Run each test for half the time
    exclude = ("kill", "chcon", "chown", "chroot", "dd", "ginstall", "stdbuf", 
               "libstdbuf", "rm", "rmdir", "unlink")
    parser = argparse.ArgumentParser(description='Run C program on Klee')
    parser.add_argument('directoryLLVM', type=str, nargs=1, help='directory of bc files')
    parser.add_argument('directoryGCOV', type=str, nargs=1, help='dictory of gcov-instrumented executables')
    
    args = parser.parse_args()
    directoryLLVM = args.directoryLLVM[0]
    directoryGCOV = args.directoryGCOV[0]
    os.chdir(directoryLLVM)
    #files = subprocess.run(["ls"], stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
    #bcFiles = [file for file in files if ".bc" in file]
    #cFiles = [file for file in files if ".c" in file]
    os.chdir(directoryGCOV)
    #files = subprocess.run(["ls"], stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
    #gcnoFile = [file for file in files if ".gcno" in file]
    #print("gcno: ", gcnoFile)
    os.chdir(directoryLLVM)

    """
    newBcFiles = []
    for file in bcFiles:
        name = file[0:-3]
        noRun = False
        for exc in exclude:
            if exc == name:
                noRun = True
                break
        if noRun:
            continue
        found = False
        for file2 in gcnoFile:
            #print((name,file2[0:-2]))
            if name == file2[0:-5]:
                found = True
                break
        if found:
            newBcFiles += [file]
    bcFiles = newBcFiles
    print(bcFiles)
    results = []
    tested = ["od.bc", "basename.bc"
              "chgrp.bc"]"""
    toTest = ["mkdir.bc"]
    results = []
    #bcFiles = ["ls.bc", "cat.bc"] + bcFiles
    for file in toTest:     
        path = directoryLLVM+"/"+file
        result = [file]
        print("Running file: ", file)
        #sym-stdout - look it up
        #Use kleestar command on variable 'file'
        outDir = directoryLLVM+"/"+file + ".out"
    
        
        runWeighting = "klee -output-dir=" + outDir + " --max-memory=1000 --disable-inlining\
                        --optimize --libc=uclibc --posix-runtime -external-calls=all\
                        --only-output-states-covering-new --max-sym-array-size=4096\
                        --max-time=3600 --watchdog --switch-type=internal --search=nurs:vuz\
                        " + path + " --sym-args 0 1 10 --sym-args 0 2 2\
                        --sym-files 1 8 --sym-stdin 8 --sym-stdout"
        
        outvuzzer = runProgram(runWeighting, directoryLLVM, directoryGCOV, file[0:-3], outDir)  
        
        result += [outvuzzer]
        results += [result]
  
    for i in results:
        print("File: ", i[0])
        print("Vuzzer result")
        print(i[1])

def unionTest():
    #Run each test for half the time
    exclude = ("kill", "chcon", "chown", "chroot", "dd", "ginstall", "stdbuf", 
               "libstdbuf", "rm", "rmdir", "unlink")
    parser = argparse.ArgumentParser(description='Run C program on Klee')
    parser.add_argument('directoryLLVM', type=str, nargs=1, help='directory of bc files')
    parser.add_argument('directoryGCOV', type=str, nargs=1, help='dictory of gcov-instrumented executables')
    
    args = parser.parse_args()
    directoryLLVM = args.directoryLLVM[0]
    directoryGCOV = args.directoryGCOV[0]
    os.chdir(directoryLLVM)
    files = subprocess.run(["ls"], stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
    bcFiles = [file for file in files if ".bc" in file]
    cFiles = [file for file in files if ".c" in file]
    os.chdir(directoryGCOV)
    files = subprocess.run(["ls"], stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
    gcnoFile = [file for file in files if ".gcno" in file]
    print("gcno: ", gcnoFile)
    os.chdir(directoryLLVM)

    newBcFiles = []
    for file in bcFiles:
        name = file[0:-3]
        noRun = False
        for exc in exclude:
            if exc == name:
                noRun = True
                break
        if noRun:
            continue
        found = False
        for file2 in gcnoFile:
            #print((name,file2[0:-2]))
            if name == file2[0:-5]:
                found = True
                break
        if found:
            newBcFiles += [file]
    bcFiles = newBcFiles
    print(bcFiles)
    results = []
    tested = ["od.bc", "basename.bc"
              "chgrp.bc"]
    toTest = ["ls.bc","mkdir.bc", "mkfifo.bc", "mknod.bc"]
    count = 0
    #bcFiles = ["ls.bc", "cat.bc"] + bcFiles
    for file in bcFiles:
        if file not in toTest:
            continue
        
        path = directoryLLVM+"/"+file
        result = [file]
        print("Running file: ", file)
        #sym-stdout - look it up
        #Use kleestar command on variable 'file'
        outDir = directoryLLVM+"/"+file + ".out"
        outDir2 = directoryLLVM+"/"+file + "2.out"
        
        runWeighting = "klee -output-dir=" + outDir + " --max-memory=1000 --disable-inlining\
                        --optimize --libc=uclibc --posix-runtime -external-calls=all\
                        --only-output-states-covering-new --max-sym-array-size=4096\
                        --max-time=1800 --watchdog --switch-type=internal --search=nurs:bc\
                        " + path + " --sym-args 0 1 10 --sym-args 0 2 2\
                        --sym-files 1 8 --sym-stdin 8 --sym-stdout"
        
   
        runInverseWeighting = "klee -output-dir=" + outDir2 + " --max-memory=1000 --disable-inlining\
                               --optimize --libc=uclibc --posix-runtime -external-calls=all\
                               --only-output-states-covering-new --max-sym-array-size=4096\
                               --max-time=1800 --watchdog --switch-type=internal --search=nurs:ibc\
                               " + path + " --sym-args 0 1 10 --sym-args 0 2 2\
                               --sym-files 1 8 --sym-stdin 8 --sym-stdout"
        
        outUnion = union(runWeighting, runInverseWeighting, directoryLLVM,
                         directoryGCOV, file[0:-3], outDir, outDir2)
        
        result += [outUnion]
        results += [result]
        count += 1
        if count == 4:
            break

    for i in results:
        print("File: ", i[0])
        print("Union of weightings ")
        print(i[1])

#Use gcov for coverage
#Need to instrument c files first
#sort must have --parallel=1
#don't run: kill, chco
def main():
    exclude = ("kill", "chcon", "chown", "chroot", "dd", "ginstall", "stdbuf", 
               "libstdbuf", "rm", "rmdir", "unlink")
    parser = argparse.ArgumentParser(description='Run C program on Klee')
    parser.add_argument('directoryLLVM', type=str, nargs=1, help='directory of bc files')
    parser.add_argument('directoryGCOV', type=str, nargs=1, help='dictory of gcov-instrumented executables')
    
    args = parser.parse_args()
    directoryLLVM = args.directoryLLVM[0]
    directoryGCOV = args.directoryGCOV[0]
    os.chdir(directoryLLVM)
    files = subprocess.run(["ls"], stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
    bcFiles = [file for file in files if ".bc" in file]
    cFiles = [file for file in files if ".c" in file]
    os.chdir(directoryGCOV)
    files = subprocess.run(["ls"], stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
    gcnoFile = [file for file in files if ".gcno" in file]
    print("gcno: ", gcnoFile)
    os.chdir(directoryLLVM)


    newBcFiles = []
    for file in bcFiles:
        name = file[0:-3]
        noRun = False
        for exc in exclude:
            if exc == name:
                noRun = True
                break
        if noRun:
            continue
        found = False
        for file2 in gcnoFile:
            #print((name,file2[0:-2]))
            if name == file2[0:-5]:
                found = True
                break
        if found:
            newBcFiles += [file]
    bcFiles = newBcFiles
    print(bcFiles)
    results = []
    tested = ["od.bc", "basename.bc"
              "chgrp.bc"]
    #toTest = ["od.bc", "chgrp.bc", "ls.bc", "cat.bc"]
    toTest = ["ls.bc","mkdir.bc", "mkfifo.bc", "mknod.bc"]
    count = 0
    #bcFiles = ["ls.bc", "cat.bc"] + bcFiles
    for file in bcFiles:
        if file not in toTest:
            continue
        """if file == "ls.bc":
            tested += ["ls.bc"]
        if file == "cat.bc":
            tested += ["cat.bc"]"""
        path = directoryLLVM+"/"+file
        result = [file]
        print("Running file: ", file)
        #sym-stdout - look it up
        #Use kleestar command on variable 'file'
        outDir = directoryLLVM+"/"+file + ".out"
        
        runDefault = "klee -output-dir=" + outDir + " --max-memory=1000 --disable-inlining\
                      --optimize --libc=uclibc --posix-runtime -external-calls=all\
                      --only-output-states-covering-new --max-sym-array-size=4096\
                      --max-time=3600 --watchdog --switch-type=internal\
                      " + path + " --sym-args 0 1 10 --sym-args 0 2 2\
                      --sym-files 1 8 --sym-stdin 8 --sym-stdout"
        
        runHighestExecution = "klee -output-dir=" + outDir + " --max-memory=1000 --disable-inlining\
                               --optimize  --libc=uclibc --posix-runtime -external-calls=all\
                               --only-output-states-covering-new --max-sym-array-size=4096\
                               --max-time=3600 --watchdog --switch-type=internal --search=pg\
                               " + path + " --sym-args 0 1 10 --sym-args 0 2 2\
                               --sym-files 1 8 --sym-stdin 8 --sym-stdout"

        runWeighting = "klee -output-dir=" + outDir + " --max-memory=1000 --disable-inlining\
                        --optimize --libc=uclibc --posix-runtime -external-calls=all\
                        --only-output-states-covering-new --max-sym-array-size=4096\
                        --max-time=3600 --watchdog --switch-type=internal --search=nurs:bc\
                        " + path + " --sym-args 0 1 10 --sym-args 0 2 2\
                        --sym-files 1 8 --sym-stdin 8 --sym-stdout"
        
   
        runInverseWeighting = "klee -output-dir=" + outDir + " --max-memory=1000 --disable-inlining\
                               --optimize --libc=uclibc --posix-runtime -external-calls=all\
                               --only-output-states-covering-new --max-sym-array-size=4096\
                               --max-time=3600 --watchdog --switch-type=internal --search=nurs:ibc\
                               " + path + " --sym-args 0 1 10 --sym-args 0 2 2\
                               --sym-files 1 8 --sym-stdin 8 --sym-stdout"

        outWeighting = runProgram(runWeighting, directoryLLVM, directoryGCOV, file[0:-3], outDir)       
        outInverseWeighting = runProgram(runInverseWeighting, directoryLLVM, directoryGCOV, file[0:-3], outDir)
        outDefault = runProgram(runDefault, directoryLLVM, directoryGCOV, file[0:-3], outDir)   
        outHighestExecution = runProgram(runHighestExecution, directoryLLVM, directoryGCOV, file[0:-3], outDir)
        
        result += [outInverseWeighting, outHighestExecution, outWeighting, outDefault]
        results += [result]
        count += 1
        if count == 4:
            break

    for i in results:
        print("File: ", i[0])
        print("With random inverse weighting: ")
        print(i[1])
        print("With highest execution count: ")
        print(i[2])
        print("With random weighting: ")
        print(i[3])
        print("With default searcher: ")
        print(i[4])
    #print(newBcFiles)

             
vuzzerTest()           
#main()
#unionTest()
